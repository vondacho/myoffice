buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        jcenter()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath 'io.franzbecker:gradle-lombok:1.14'
    }
}

allprojects {
    apply plugin: 'java'
    group 'edu.noia.myoffice'
    version = '0.2.1'
    repositories {
        jcenter()
        mavenLocal()
        maven {
            name 'mavenRemote'
            url myMavenRepoReadUrl
            credentials {
                username myMavenRepoReadUsername
                password myMavenRepoReadPassword
            }
        }
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'
    apply plugin: 'io.franzbecker.gradle-lombok'
    sourceCompatibility = 10
    ext {
        myofficeCommonVersion = '0.14.2'
        lombokVersion = '1.18.6'
        mockitoVersion = '2.23.0'
        jacksonVersion = '2.9.2'
        vavrVersion = '0.9.2'
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }
    dependencies {
        compile "io.vavr:vavr:${vavrVersion}"
        compile "org.projectlombok:lombok:${lombokVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile 'pl.pragmatists:JUnitParams:1.1.1'
    }
    jar {
        manifest.attributes provider: 'gradle'
    }
    publishing {
        repositories {
            mavenLocal()
            maven {
                name 'mavenRemote'
                url myMavenRepoWriteUrl
                credentials {
                    username myMavenRepoWriteUsername
                    password myMavenRepoWritePassword
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
    lombok {
        version = "${lombokVersion}"
        sha256 = "" // skip verify Lombok task
    }
    task install(dependsOn: publishToMavenLocal)
    task deploy(dependsOn: publish)

    bootJar.enabled = false
    jar.enabled = true
}

gradle.taskGraph.whenReady { graph ->
    def badTasks = ['startScripts', 'distTar', 'distZip']
    graph.allTasks.findAll {it.name in badTasks}.each { task ->
        task.enabled = false
    }
}

project(':myoffice-person-data') {
    dependencies {
        compile project(':myoffice-person-domain'),
                project(':myoffice-person-rest')
    }
}

project(':myoffice-person-rest') {
    dependencies {
        compile project(':myoffice-person-domain')
    }
}
